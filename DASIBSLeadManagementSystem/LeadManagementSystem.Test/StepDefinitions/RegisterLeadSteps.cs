using Azure;
using FluentAssertions;
using LeadManagementSystem.Comman.Helpers;
using LeadManagementSystem.Contracts.Response;
using LeadManagementSystem.Shared.Infrastructure;
using LeadManagementSystem.Test.Common;
using LeadManagementSystem.Test.Support;
using Microsoft.AspNetCore.Mvc;
using TechTalk.SpecFlow;
using TechTalk.SpecFlow.Assist;
using ContentResult = Microsoft.AspNetCore.Mvc.ContentResult;
using LeadResponse = LeadManagementSystem.Shared.Contracts.LeadResponse;

namespace LeadManagementSystem.Test.StepDefinitions
{
    [Binding]
    public class RegisterLeadSteps
    {
        private readonly TestContext testContext;

        public RegisterLeadSteps(TestContext _testContext)
        {
            testContext = _testContext;
        }

        [Given("I have a lead request with the following details:")]
        public void GivenIHaveALeadRequest(Table table)
        {
            testContext.leadRequest = table.CreateInstance<Shared.Contracts.Request.LeadRequest>();
            testContext.xmlContent = XmlJsonConverter.SerializeToXml(testContext.leadRequest);
        }
        [Given("I have a lead request with the empty details:")]
        public void GivenIHaveAEmptyLeadRequest()
        {
            testContext.leadRequest = null;
        }
        [When("I attempt to register the lead request")]
        public async Task WhenIAttemptToRegisterTheLeadRequestAsync()
        {
            if (testContext.leadRequest == null)
            {
                throw new NullReferenceException("Lead request is null");
            }
            else
            {
                testContext.leadXmlResult = await testContext.leadController.RegisterLead(testContext.leadRequest);
                testContext.contentResult = testContext.leadXmlResult as ContentResult;

                testContext.contentResult.Should().NotBeNull("ContentResult expected");
                testContext.leadResponseEnvelope = XmlHelper.DeserializeXml<LeadResponseEnvelope>(testContext.contentResult.Content);
                testContext.leadResponse = testContext.leadResponseEnvelope.Body.CreateLeadFromRequestHDResponse.WebServiceMessage;
            }
        }
        [When(@"I attempt to register the lead request with invalid request")]
        public async Task WhenIAttemptToRegisterTheLeadRequestWithInvalidRequest()
        {
            testContext.leadXmlResult = await testContext.leadController.RegisterLead(testContext.leadRequest);
            testContext.contentResult = testContext.leadXmlResult as ContentResult;
            testContext.response = XmlHelper.DeserializeXml<Shared.Infrastructure.ActionResult<Contracts.Response.LeadResponse>>(testContext.contentResult.Content);

        }
        [When(@"I attempt to register the lead request with empty request")]
        public async Task IAttemptToRegisterTheLeadRequestWithEmptyRequest()
        {
            testContext.leadXmlResult = await testContext.leadController.RegisterLead(testContext.leadRequest);
            var okResult = testContext.leadXmlResult as OkObjectResult;
            testContext.response = okResult.Value as LeadManagementSystem.Shared.Infrastructure.ActionResult<Contracts.Response.LeadResponse>;


        }
        [Then("The response should indicate success")]
        public void ThenTheResponseShouldIndicateSuccess()
        {
            CheckResponseSuccess(testContext.leadResponse, true, "Decline", "Cancelled: Consent Declined");
        }

        [Then("The response should show validation errors for the following fields")]
        public void ThenTheResponseShouldContainValidationErrors(Table table)
        {
            var errors = testContext.response.Errors;

            errors.Should().NotBeNullOrEmpty("Validation errors expected");

            foreach (var row in table.Rows)
            {
                errors.Should().Contain(e => e.FieldName == row["fieldName"] && e.ErrorMessage.Contains(row["errorMessage"]),
                    $"Error '{row["errorMessage"]}' for field '{row["fieldName"]}' expected");
            }
        }

        [Then(@"Save the lead in the database and verify it's saved.")]
        public void ThenTheLeadShouldBeSavedInTheDatabase()
        {
            CheckResponseSuccess(testContext.leadResponse, true, "Decline", "Cancelled: Consent Declined");
            var persistedLead = testContext.dbContext.LeadModel
                .FirstOrDefault(l => l.IDNumber == testContext.leadRequest.IDNumber);

            persistedLead.Should().NotBeNull("Lead should be saved in the database");
        }

        [Then(@"Exception for auto-generated id should be shown.")]
        public void ThenExceptionForAutoGeneratedId()
        {
            CheckResponseError(testContext.leadResponse, "An error occurred while saving the entity changes. See the inner exception for details.");
        }

        [Then(@"The response should contain an exception error indicating that the UMID was not found.")]
        public void ThenTheResponseShouldContainExceptionErrorUMIDWasNotFound()
        {
            CheckResponseError(testContext.leadResponse, "Failed to fetch the umid from lead source model");
        }

        [Then(@"Response should indicate missing BrandId for UMID")]
        public void ThenResponseShouldIndicateMissingBrandIdForUMID()
        {
            CheckResponseError(testContext.leadResponse, "Failed to fetch the umid from lead source model");
        }

        [When("CreateLeadHandler receives (.*) from LES provider")]
        public async Task WhenTheLESProviderReturnsADecisionOf(string decision)
        {
            if (testContext.leadRequest == null)
            {
                testContext.leadXmlResult = null;
            }
            else
            {
                testContext.leadXmlResult = await testContext.leadController.RegisterLead(testContext.leadRequest);
                testContext.contentResult = testContext.leadXmlResult as ContentResult;
                testContext.contentResult.Should().NotBeNull("ContentResult expected");
                testContext.leadResponseEnvelope = XmlHelper.DeserializeXml<LeadResponseEnvelope>(testContext.contentResult.Content);
                testContext.leadResponse = testContext.leadResponseEnvelope.Body.CreateLeadFromRequestHDResponse.WebServiceMessage;
            }
        }

        [Then(@"The response should indicate success or failure based on the decision (.*)")]
        public void ThenTheResponseShouldIndicateSuccessOrFailureBasedOnDecision(string decision)
        {


            testContext.leadResponse.Should().NotBeNull("Entity should not be null");

            switch (decision)
            {
                case "MayBe.":
                    CheckResponseSuccess(testContext.leadResponse, true, "Decline", "Cancelled: Consent Declined", "Approved");
                    break;
                case "Declined.":
                    CheckResponseSuccess(testContext.leadResponse, true, "Decline", "Reason 1,Reason 2");
                    break;
                case "Approved.":
                    CheckResponseSuccess(testContext.leadResponse, true, "Decline", "Cancelled: Consent Declined", "Approved");
                    break;
                default:
                    throw new NotImplementedException($"Decision '{decision}' is not implemented.");
            }
        }
        [Then(@"(.*) request result into Sql Exception")]
        [Then(@"(.*) request result into No Host Error")]
        public void ThenAnExceptionShouldBeThrown(string providerName)
        {
            var errorMessages = new Dictionary<string, string>
            {
                { "LESProvider", "Failed to get the response from les endpoint" },
                { "DbsProvider", "Failed to get the response from dbs endpoint" },
                { "DalasProvider", "Failed to create turbo application on dalas" },
                { "DalasProvider for customer status", "Failed to create turbo application on dalas" }
            };

            testContext.leadResponse.ErrorMessage.Should().Contain(errorMessages[providerName], $"{providerName} error message mismatch");
            testContext.leadResponse.Success.Should().BeFalse("Expected success flag to be false");


        }

        [Then(@"Dalas provider's message indicates application unsuccessful")]
        public void ThenDallasProviderMessageIndicatesApplicationUnsuccessful()
        {

            CheckResponseSuccess(
                testContext.leadResponse,
            successFlag: true,
            decision: "Decline",
            errorMessage: "Thank you for applying for a personal loan. Unfortunately your " +
            "application was unsuccessful as you do not meet our minimum requirements. " +
            "You are welcome to re-apply in 2 months.",
            status: "01"
            );
        }

        [Then(@"Dalas provider gives message Cancelled: (.*)")]
        public void ThenDalasProviderMessage(string expectedMessage)
        {

            CheckResponseSuccess(
                testContext.leadResponse,
                successFlag: true,
                decision: "Decline",
                errorMessage: $"Cancelled: {expectedMessage}"

            );
        }


        [Then(@"DalasProvider request result into empty response")]
        public void ThenDalasProviderRequestResultIntoEmptyResponse()
        {
            testContext.leadResponse.ErrorMessage.Should().Contain("Failed to create turbo application on dalas",
                "DalasProvider error message mismatch");
            testContext.leadResponse.Success.Should().BeFalse("Expected success flag to be false");
        }

        [Then(@"GetCustomerStatus request result exception application status is null")]
        public void ThenDalasProviderRequestResultExceptionApplicationIdIsNull()
        {
            testContext.leadResponse.ErrorMessage.Should().Contain("Failed to create turbo application on dalas", "DalasProvider error message mismatch");
            testContext.leadResponse.Success.Should().BeFalse("Expected success flag to be false");
        }

        [Then(@"Dalas provider request result exception application id is null")]
        private void DalasProviderRequestResultExceptionApplicationIdIsNull()
        {
            testContext.leadResponse.ErrorMessage.Should().Contain("Failed to create turbo application on dalas", "DalasProvider error message mismatch");
            testContext.response.Status.Should().Be(ActionResultCode.Error, "Expected error status");
            testContext.leadResponse.Success.Should().BeFalse("Expected success flag to be false");
        }

        [Then(@"Dalas provider request result exception dalas response is null")]
        public void ThenDalasProviderRequestResultExceptionDalasResponseIsNull()
        {
            testContext.leadResponse.ErrorMessage.Should().Contain("Failed to create turbo application on dalas", "DalasProvider error message mismatch");
            testContext.leadResponse.Success.Should().BeFalse("Expected success flag to be false");
        }

        [Then(@"GetCustomerStatus request result exception response is empty")]
        public void ThenGetCustomerStatusRequestResultExceptionResponseIsEmpty()
        {
            testContext.leadResponse.ErrorMessage.Should().Contain("Failed to create turbo application on dalas", "DalasProvider error message mismatch");
            testContext.leadResponse.Success.Should().BeFalse("Expected success flag to be false");
        }



        [Then(@"Exception thrown by leadcontroller for empty leadrequest")]
        public void ThenExceptionThrownByLeadcontrollerForEmptyLeadrequest()
        {
            testContext.response.Errors.Should().NotBeNull("The response should contain errors.");

            var validationError = testContext.response.Errors.FirstOrDefault();

            validationError.ErrorMessage.Should().Contain("Value cannot be null. (Parameter 'request')",
                "LeadController error message mismatch for empty lead request.");
            validationError.FieldName.Should().Contain("Error",
                "Expected 'Error' as the field name in the validation error.");
        }

        private void CheckResponseSuccess(Contracts.Response.LeadResponse response, bool successFlag, string decision, string errorMessage = null, string status = null)
        {

            response.Should().NotBeNull("Entity should not be null");
            response.Success.Should().Be(successFlag, "Success flag mismatch");
            if (errorMessage != null)
            {
                response.ErrorMessage.Should().Contain(errorMessage, "Error message mismatch");
            }
            if (decision != null)
            {
                response.Decision.Should().Be(decision, "Decision mismatch");
            }
            if (status != null)
            {
                response.Status.Should().Be(status, "Status mismatch");
            }
        }

        private void CheckResponseError(Contracts.Response.LeadResponse response, string expectedMessage)
        {


            response.Should().NotBeNull("Entity should not be null");
            response.Success.Should().BeFalse("Success flag should be false");
            response.ErrorMessage.Should().Contain(expectedMessage, "Error message mismatch");
        }
    }
}