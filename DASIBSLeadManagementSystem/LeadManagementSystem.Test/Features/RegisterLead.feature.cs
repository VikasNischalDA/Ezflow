// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LeadManagementSystem.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegisterLeadFeature : object, Xunit.IClassFixture<RegisterLeadFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegisterLead.feature"
#line hidden
        
        public RegisterLeadFeature(RegisterLeadFeature.FixtureData fixtureData, LeadManagementSystem_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Register Lead", "    In order to manage leads\r\n    As a user\r\n    I want to be able to register a " +
                    "new lead successfully", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a new lead with accurate details.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a new lead with accurate details.")]
        public void AttemptToRegisterANewLeadWithAccurateDetails_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a new lead with accurate details.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table1.AddRow(new string[] {
                            "1234567890123",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0822345673",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 9
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("The response should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with  invalid telephone number fields, IDNumber, and o" +
            "ther  fields.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with  invalid telephone number fields, IDNumber, and o" +
            "ther  fields.")]
        public void AttemptToRegisterALeadWithInvalidTelephoneNumberFieldsIDNumberAndOtherFields_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with  invalid telephone number fields, IDNumber, and o" +
                    "ther  fields.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table2.AddRow(new string[] {
                            "123456789012342",
                            "TestJohn",
                            "TestDoe",
                            "123455",
                            "0822345673",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "45678",
                            "Source1",
                            "Yes",
                            "Option1",
                            "111111",
                            "123456789",
                            "yes",
                            "true",
                            ""});
#line 16
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table2, "Given ");
#line hidden
#line 19
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table3.AddRow(new string[] {
                            "IDNumber",
                            "The IDNumber must be exactly 13 characters long."});
                table3.AddRow(new string[] {
                            "CellPhone",
                            "Cell phone number must begin with \'07\' or \'08\'."});
                table3.AddRow(new string[] {
                            "WorkNumber",
                            "Work number provided is in invalid format."});
                table3.AddRow(new string[] {
                            "HomeNumber",
                            "Home number provided is in invalid format."});
                table3.AddRow(new string[] {
                            "UMID",
                            "UMID must be of 8 digits."});
#line 20
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with an invalid Gross Income value.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with an invalid Gross Income value.")]
        public void AttemptToRegisterALeadWithAnInvalidGrossIncomeValue_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with an invalid Gross Income value.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table4.AddRow(new string[] {
                            "1Abs123456789",
                            "TestJohn@",
                            "TestDoe@",
                            "0822345673",
                            "0822345673",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "123U5678",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "1000000"});
#line 29
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table4, "Given ");
#line hidden
#line 32
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table5.AddRow(new string[] {
                            "GrossIncome",
                            "Gross Income must be between 0 and 999999."});
                table5.AddRow(new string[] {
                            "IDNumber",
                            "The IDNumber must contain only numbers."});
                table5.AddRow(new string[] {
                            "FirstName",
                            "FirstName cannot contain numbers or special characters."});
                table5.AddRow(new string[] {
                            "Surname",
                            "SurName cannot contain numbers or special characters."});
                table5.AddRow(new string[] {
                            "UMID",
                            "UMID must contain only numbers."});
#line 33
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with identical Email and SupplierEmail fields and empt" +
            "y mandatory fields.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with identical Email and SupplierEmail fields and empt" +
            "y mandatory fields.")]
        public void AttemptToRegisterALeadWithIdenticalEmailAndSupplierEmailFieldsAndEmptyMandatoryFields_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with identical Email and SupplierEmail fields and empt" +
                    "y mandatory fields.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table6.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "0822345673",
                            "john.doe@test.com",
                            "john.doe@test.com",
                            "",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "",
                            "123"});
#line 41
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table6, "Given ");
#line hidden
#line 44
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table7.AddRow(new string[] {
                            "IDNumber",
                            "The IDNumber must not be empty."});
                table7.AddRow(new string[] {
                            "UMID",
                            "UMID cannot be empty."});
                table7.AddRow(new string[] {
                            "FirstName",
                            "FirstName cannot be empty."});
                table7.AddRow(new string[] {
                            "Surname",
                            "SurName cannot be empty."});
                table7.AddRow(new string[] {
                            "CellPhone",
                            "Cell phone number provided is in invalid format."});
#line 45
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with a missing UMID.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with a missing UMID.")]
        public void AttemptToRegisterALeadWithAMissingUMID_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with a missing UMID.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table8.AddRow(new string[] {
                            "1234567890123",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0822345673",
                            "test-not-an-email",
                            "test-not-an-email",
                            "12345678",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "no",
                            "true",
                            "123"});
#line 55
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table8, "Given ");
#line hidden
#line 58
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table9.AddRow(new string[] {
                            "Email",
                            "Please provide a valid email address."});
                table9.AddRow(new string[] {
                            "SupplierEmail",
                            "Please provide a valid Supplier Email address."});
#line 59
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with an invalid FirstName, Surname.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with an invalid FirstName, Surname.")]
        public void AttemptToRegisterALeadWithAnInvalidFirstNameSurname_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with an invalid FirstName, Surname.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table10.AddRow(new string[] {
                            "1234567890123",
                            "Simulateanexceptiontotriggerthevalidationblockinthecode",
                            "Simulateanexceptiontotriggerthevalidationblockinthecode",
                            "082234573",
                            "0522345675",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "12345678",
                            "Source1",
                            "ResponseExceedingMaxLimit",
                            "Option1",
                            "+919878634821",
                            "+911234567891",
                            "yes",
                            "true",
                            "123"});
#line 65
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table10, "Given ");
#line hidden
#line 68
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table11.AddRow(new string[] {
                            "FirstName",
                            "FirstName cannot exceed 50 characters."});
                table11.AddRow(new string[] {
                            "Surname",
                            "SurName cannot exceed 50 characters."});
                table11.AddRow(new string[] {
                            "CellPhone",
                            "Cell phone number must be 10 digits long."});
#line 69
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with a FirstName, Surname with numbers.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with a FirstName, Surname with numbers.")]
        public void AttemptToRegisterALeadWithAFirstNameSurnameWithNumbers_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with a FirstName, Surname with numbers.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table12.AddRow(new string[] {
                            "1234567890123",
                            "12334",
                            "1234",
                            "0822345673",
                            "0822345673",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "12345678",
                            "Source1",
                            "ResponseExceedingMaxLimit",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "123"});
#line 76
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table12, "Given ");
#line hidden
#line 79
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table13.AddRow(new string[] {
                            "FirstName",
                            "FirstName cannot contain numbers or special characters."});
                table13.AddRow(new string[] {
                            "Surname",
                            "SurName cannot contain numbers or special characters."});
#line 80
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with an invalid PermissionToPromote and AllowCreditChe" +
            "ck value.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with an invalid PermissionToPromote and AllowCreditChe" +
            "ck value.")]
        public void AttemptToRegisterALeadWithAnInvalidPermissionToPromoteAndAllowCreditCheckValue_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with an invalid PermissionToPromote and AllowCreditChe" +
                    "ck value.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table14.AddRow(new string[] {
                            "1234567890123",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "12345678",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "Maybe",
                            "",
                            "123"});
#line 86
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table14, "Given ");
#line hidden
#line 89
 testRunner.When("I attempt to register the lead request with invalid request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "errorMessage"});
                table15.AddRow(new string[] {
                            "PermissionToPromote",
                            "Permission to Promote must be \'yes\' or \'no\'."});
#line 90
 testRunner.Then("The response should show validation errors for the following fields", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead and verify if it\'s saved in the database.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead and verify if it\'s saved in the database.")]
        public void AttemptToRegisterALeadAndVerifyIfItsSavedInTheDatabase_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead and verify if it\'s saved in the database.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table16.AddRow(new string[] {
                            "1234567890234",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 96
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table16, "Given ");
#line hidden
#line 99
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.Then("Save the lead in the database and verify it\'s saved.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead with an explicit ID value that is auto-generated.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead with an explicit ID value that is auto-generated.")]
        public void AttemptToRegisterALeadWithAnExplicitIDValueThatIsAuto_Generated_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead with an explicit ID value that is auto-generated.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table17.AddRow(new string[] {
                            "1",
                            "1234567890234",
                            "TestJohn",
                            "TestDoe",
                            "0812345678",
                            "0522345675",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0621234567",
                            "yes",
                            "true",
                            "1200"});
#line 103
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table17, "Given ");
#line hidden
#line 106
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.Then("Exception for auto-generated id should be shown.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead and receive an exception error stating \"UMID not found" +
            ".\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead and receive an exception error stating \"UMID not found" +
            ".\"")]
        public void AttemptToRegisterALeadAndReceiveAnExceptionErrorStatingUMIDNotFound_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead and receive an exception error stating \"UMID not found" +
                    ".\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table18.AddRow(new string[] {
                            "1234567890222",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "12345678",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 110
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table18, "Given ");
#line hidden
#line 114
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
 testRunner.Then("The response should contain an exception error indicating that the UMID was not f" +
                        "ound.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead and receive an exception indicating that the BrandId c" +
            "orresponding to the UMID was not found.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead and receive an exception indicating that the BrandId c" +
            "orresponding to the UMID was not found.")]
        public void AttemptToRegisterALeadAndReceiveAnExceptionIndicatingThatTheBrandIdCorrespondingToTheUMIDWasNotFound_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead and receive an exception indicating that the BrandId c" +
                    "orresponding to the UMID was not found.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table19.AddRow(new string[] {
                            "1234567894567",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@test.com",
                            "supplier@test.com",
                            "79907890",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 118
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table19, "Given ");
#line hidden
#line 122
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.Then("Response should indicate missing BrandId for UMID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Attempt to register a lead and handle various responses from the LES provider.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead and handle various responses from the LES provider.")]
        [Xunit.InlineDataAttribute("1212131314141", "TestJohn", "TestDoe", "0722345675", "0722345675", "john.doe@test.com", "supplier@test.com", "25498756", "Source1", "Yes", "Option1", "0822345673", "0822345673", "yes", "true", "50000", "Declined", new string[0])]
        [Xunit.InlineDataAttribute("8888889999999", "TestJai", "TestDoe", "0722345675", "0522345675", "jai.doe@test.com", "supplier@test.com", "25498756", "Source1", "Yes", "Option1", "0822345673", "0822345673", "yes", "true", "50000", "MayBe", new string[0])]
        [Xunit.InlineDataAttribute("0000122212121", "TestJas", "TestDoe", "0722345675", "0522345675", "jas.doe@test.com", "supplier@test.com", "25498756", "Source1", "Yes", "Option1", "0822345673", "0821234567", "yes", "true", "50000", "Approved", new string[0])]
        public void AttemptToRegisterALeadAndHandleVariousResponsesFromTheLESProvider_(
                    string idNumber, 
                    string firstName, 
                    string surname, 
                    string cellPhone, 
                    string alternateNumber, 
                    string email, 
                    string supplierEmail, 
                    string uMID, 
                    string supplierSource, 
                    string sMSresponse, 
                    string option, 
                    string workNumber, 
                    string homeNumber, 
                    string permissionToPromote, 
                    string allowsCreditCheck, 
                    string grossIncome, 
                    string decision, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IdNumber", idNumber);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("Surname", surname);
            argumentsOfScenario.Add("CellPhone", cellPhone);
            argumentsOfScenario.Add("AlternateNumber", alternateNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("SupplierEmail", supplierEmail);
            argumentsOfScenario.Add("UMID", uMID);
            argumentsOfScenario.Add("SupplierSource", supplierSource);
            argumentsOfScenario.Add("SMSresponse", sMSresponse);
            argumentsOfScenario.Add("Option", option);
            argumentsOfScenario.Add("WorkNumber", workNumber);
            argumentsOfScenario.Add("HomeNumber", homeNumber);
            argumentsOfScenario.Add("PermissionToPromote", permissionToPromote);
            argumentsOfScenario.Add("AllowsCreditCheck", allowsCreditCheck);
            argumentsOfScenario.Add("GrossIncome", grossIncome);
            argumentsOfScenario.Add("Decision", decision);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead and handle various responses from the LES provider.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table20.AddRow(new string[] {
                            string.Format("{0}", idNumber),
                            string.Format("{0}", firstName),
                            string.Format("{0}", surname),
                            string.Format("{0}", cellPhone),
                            string.Format("{0}", alternateNumber),
                            string.Format("{0}", email),
                            string.Format("{0}", supplierEmail),
                            string.Format("{0}", uMID),
                            string.Format("{0}", supplierSource),
                            string.Format("{0}", sMSresponse),
                            string.Format("{0}", option),
                            string.Format("{0}", workNumber),
                            string.Format("{0}", homeNumber),
                            string.Format("{0}", permissionToPromote),
                            string.Format("{0}", allowsCreditCheck),
                            string.Format("{0}", grossIncome)});
#line 126
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table20, "Given ");
#line hidden
#line 129
 testRunner.When(string.Format("CreateLeadHandler receives {0} from LES provider", decision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
 testRunner.Then(string.Format("The response should indicate success or failure based on the decision {0}.", decision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception for \"no host known\" should be thrown by the DBS provider.")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception for \"no host known\" should be thrown by the DBS provider.")]
        public void AnExceptionForNoHostKnownShouldBeThrownByTheDBSProvider_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception for \"no host known\" should be thrown by the DBS provider.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table21.AddRow(new string[] {
                            "1221221221221",
                            "TestJohn",
                            "Testinvalid",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 139
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table21, "Given ");
#line hidden
#line 143
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.Then("DbsProvider request result into No Host Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by LES provider no host known")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by LES provider no host known")]
        public void AnExceptionShouldBeThrownByLESProviderNoHostKnown()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by LES provider no host known", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table22.AddRow(new string[] {
                            "4545454512121",
                            "TestJohn",
                            "TestDoenohost",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 147
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table22, "Given ");
#line hidden
#line 151
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.Then("LESProvider request result into No Host Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by DALAS provider no host known")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by DALAS provider no host known")]
        public void AnExceptionShouldBeThrownByDALASProviderNoHostKnown()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by DALAS provider no host known", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table23.AddRow(new string[] {
                            "1234512345123",
                            "TestJohn",
                            "TestDoeINVALID",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 155
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table23, "Given ");
#line hidden
#line 159
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
 testRunner.Then("DalasProvider request result into No Host Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by DALAS provider no host known for customer status" +
            " update")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by DALAS provider no host known for customer status" +
            " update")]
        public void AnExceptionShouldBeThrownByDALASProviderNoHostKnownForCustomerStatusUpdate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by DALAS provider no host known for customer status" +
                    " update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table24.AddRow(new string[] {
                            "1111111111111",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 163
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table24, "Given ");
#line hidden
#line 167
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.Then("DalasProvider for customer status request result into No Host Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead and receive: Empty response from dalas provider")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead and receive: Empty response from dalas provider")]
        public void AttemptToRegisterALeadAndReceiveEmptyResponseFromDalasProvider()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead and receive: Empty response from dalas provider", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table25.AddRow(new string[] {
                            "2221212111333",
                            "TestJohn",
                            "TestDoeempty",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 172
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table25, "Given ");
#line hidden
#line 176
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 177
 testRunner.Then("DalasProvider request result into empty response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead and receive: \"Application unsuccessful; reapply in 2 m" +
            "onths.\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead and receive: \"Application unsuccessful; reapply in 2 m" +
            "onths.\"")]
        public void AttemptToRegisterALeadAndReceiveApplicationUnsuccessfulReapplyIn2Months_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead and receive: \"Application unsuccessful; reapply in 2 m" +
                    "onths.\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table26.AddRow(new string[] {
                            "1234512345123",
                            "TestJohn",
                            "TestDoetwomonths",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 180
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table26, "Given ");
#line hidden
#line 184
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
 testRunner.Then("Dalas provider\'s message indicates application unsuccessful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead Dalas provider give message Cancelled: Message To be c" +
            "onfirmed")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead Dalas provider give message Cancelled: Message To be c" +
            "onfirmed")]
        public void AttemptToRegisterALeadDalasProviderGiveMessageCancelledMessageToBeConfirmed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead Dalas provider give message Cancelled: Message To be c" +
                    "onfirmed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table27.AddRow(new string[] {
                            "1234512345123",
                            "TestJohn",
                            "TestDoecancel",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 188
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table27, "Given ");
#line hidden
#line 192
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 193
 testRunner.Then("Dalas provider gives message Cancelled: Message To be confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to register a lead Dalas provider give message Cancelled: Consent Decline" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "Attempt to register a lead Dalas provider give message Cancelled: Consent Decline" +
            "d")]
        public void AttemptToRegisterALeadDalasProviderGiveMessageCancelledConsentDeclined()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to register a lead Dalas provider give message Cancelled: Consent Decline" +
                    "d", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table28.AddRow(new string[] {
                            "1234512345123",
                            "TestJohn",
                            "TestDoeconsent",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 196
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table28, "Given ");
#line hidden
#line 200
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.Then("Dalas provider gives message Cancelled: Consent Declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by DALAS provider application status is null")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by DALAS provider application status is null")]
        public void AnExceptionShouldBeThrownByDALASProviderApplicationStatusIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by DALAS provider application status is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table29.AddRow(new string[] {
                            "1212122121212",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 204
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table29, "Given ");
#line hidden
#line 208
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.Then("GetCustomerStatus request result exception application status is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by DALAS provider response is null")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by DALAS provider response is null")]
        public void AnExceptionShouldBeThrownByDALASProviderResponseIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by DALAS provider response is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 211
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table30.AddRow(new string[] {
                            "1122112111211",
                            "TestJohn",
                            "TestDoeempty",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 212
 testRunner.Given("I have a lead request with the following details:", ((string)(null)), table30, "Given ");
#line hidden
#line 216
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.Then("Dalas provider request result exception dalas response is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by GetCustomerStatus response is empty")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by GetCustomerStatus response is empty")]
        public void AnExceptionShouldBeThrownByGetCustomerStatusResponseIsEmpty()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by GetCustomerStatus response is empty", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "IDNumber",
                            "FirstName",
                            "Surname",
                            "CellPhone",
                            "AlternateNumber",
                            "Email",
                            "SupplierEmail",
                            "UMID",
                            "SupplierSource",
                            "SMSresponse",
                            "Option",
                            "WorkNumber",
                            "HomeNumber",
                            "PermissionToPromote",
                            "AllowsCreditCheck",
                            "GrossIncome"});
                table31.AddRow(new string[] {
                            "0000000000000",
                            "TestJohn",
                            "TestDoe",
                            "0822345673",
                            "0522345675",
                            "john.doe@gmail.com",
                            "supplier@gmail.com",
                            "25498756",
                            "Source1",
                            "Yes",
                            "Option1",
                            "0822345673",
                            "0822345673",
                            "yes",
                            "true",
                            "50000"});
#line 220
testRunner.Given("I have a lead request with the following details:", ((string)(null)), table31, "Given ");
#line hidden
#line 224
 testRunner.When("I attempt to register the lead request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 225
 testRunner.Then("GetCustomerStatus request result exception response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An exception should be thrown by Leadcontroller")]
        [Xunit.TraitAttribute("FeatureTitle", "Register Lead")]
        [Xunit.TraitAttribute("Description", "An exception should be thrown by Leadcontroller")]
        public void AnExceptionShouldBeThrownByLeadcontroller()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An exception should be thrown by Leadcontroller", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 230
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 231
 testRunner.Given("I have a lead request with the empty details:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 232
 testRunner.When("I attempt to register the lead request with empty request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 233
    testRunner.Then("Exception thrown by leadcontroller for empty leadrequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegisterLeadFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegisterLeadFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
